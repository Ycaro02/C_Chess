def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
}
else {
    apply plugin: 'com.android.library'
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
	implementation 'com.squareup.okhttp3:okhttp:4.9.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
}


def getVersionFromHeader() {
    def versionFile = file('../../../rsc/version/version.h')
    def versionLine = versionFile.readLines().find { it.contains('CHESS_VERSION') }
    def versionMatcher = (versionLine =~ /"(\d+\.\d+\.\d+)"/)
    println "Version: ${versionMatcher ? versionMatcher[0][1] : '1.0.0'}"
	return versionMatcher ? versionMatcher[0][1] : '1.0.0'
}

android {
    if (buildAsApplication) {
        namespace "org.libsdl.app"
    }
    compileSdkVersion 34
    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 34
        versionCode 1
        // versionName "1.0"
        versionName getVersionFromHeader()
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=android-21"
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
            // cmake {
            //     arguments "-DANDROID_APP_PLATFORM=android-19", "-DANDROID_STL=c++_static"
            //     // abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            //     abiFilters 'arm64-v8a'
            // }
        }
    }

    /*Add Compile options in following block*/
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
	


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
            // cmake {
            //     path 'jni/CMakeLists.txt'
            // }
        }
       
    }
    lint {
        abortOnError false
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

// tasks.withType(JavaCompile) {
// 	options.compilerArgs << "-Xlint:deprecation"
// }
